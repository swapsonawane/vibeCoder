{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    // First, do a synchronous check\n    const token = this.authService.getToken();\n    const user = this.authService.getCurrentUser();\n    // If we have both token and user, allow immediately\n    if (token && user) {\n      return true;\n    }\n    // Fallback to Observable check\n    return this.authService.isAuthenticated$.pipe(take(1), map(isAuthenticated => {\n      if (isAuthenticated) {\n        return true;\n      } else {\n        this.router.navigate(['/login'], {\n          queryParams: {\n            message: 'Please log in to access this page',\n            returnUrl: this.router.url\n          }\n        });\n        return false;\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthGuard };","map":{"version":3,"names":["map","take","AuthGuard","constructor","authService","router","canActivate","token","getToken","user","getCurrentUser","isAuthenticated$","pipe","isAuthenticated","navigate","queryParams","message","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> | boolean {\r\n    // First, do a synchronous check\r\n    const token = this.authService.getToken();\r\n    const user = this.authService.getCurrentUser();\r\n\r\n    // If we have both token and user, allow immediately\r\n    if (token && user) {\r\n      return true;\r\n    }\r\n\r\n    // Fallback to Observable check\r\n    return this.authService.isAuthenticated$.pipe(\r\n      take(1),\r\n      map((isAuthenticated: boolean) => {\r\n        if (isAuthenticated) {\r\n          return true;\r\n        } else {\r\n          this.router.navigate(['/login'], { \r\n            queryParams: { \r\n              message: 'Please log in to access this page',\r\n              returnUrl: this.router.url \r\n            }\r\n          });\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n} "],"mappings":"AAGA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAG1C,MAGaC,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT;IACA,MAAMC,KAAK,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;IACzC,MAAMC,IAAI,GAAG,IAAI,CAACL,WAAW,CAACM,cAAc,EAAE;IAE9C;IACA,IAAIH,KAAK,IAAIE,IAAI,EAAE;MACjB,OAAO,IAAI;;IAGb;IACA,OAAO,IAAI,CAACL,WAAW,CAACO,gBAAgB,CAACC,IAAI,CAC3CX,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAEa,eAAwB,IAAI;MAC/B,IAAIA,eAAe,EAAE;QACnB,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAC/BC,WAAW,EAAE;YACXC,OAAO,EAAE,mCAAmC;YAC5CC,SAAS,EAAE,IAAI,CAACZ,MAAM,CAACa;;SAE1B,CAAC;QACF,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;;;uBAlCWhB,SAAS,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATtB,SAAS;MAAAuB,OAAA,EAATvB,SAAS,CAAAwB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEPzB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}