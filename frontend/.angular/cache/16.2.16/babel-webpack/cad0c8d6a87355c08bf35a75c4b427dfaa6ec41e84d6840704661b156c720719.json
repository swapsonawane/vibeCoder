{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nclass BillPaymentService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  // Bill Payment Operations\n  createBillPayment(request) {\n    return this.http.post(`${environment.apiUrl}/bills`, request, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getBillPayments() {\n    return this.http.get(`${environment.apiUrl}/bills`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getBillPayment(paymentId) {\n    return this.http.get(`${environment.apiUrl}/bills/${paymentId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getBillPaymentsByStatus(status) {\n    return this.http.get(`${environment.apiUrl}/bills`, {\n      headers: this.getAuthHeaders(),\n      params: {\n        status: status.toString()\n      }\n    });\n  }\n  cancelBillPayment(paymentId) {\n    return this.http.put(`${environment.apiUrl}/bills/${paymentId}/cancel`, {}, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Scheduled and Recurring Payments\n  getScheduledPayments() {\n    return this.http.get(`${environment.apiUrl}/bills/scheduled`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getRecurringPayments() {\n    return this.http.get(`${environment.apiUrl}/bills/recurring`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updateRecurringPayment(paymentId, payment) {\n    return this.http.put(`${environment.apiUrl}/bills/recurring/${paymentId}`, payment, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  cancelRecurringPayment(paymentId) {\n    return this.http.delete(`${environment.apiUrl}/bills/recurring/${paymentId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Payee Management\n  getPayees() {\n    return this.http.get(`${environment.apiUrl}/bills/payees`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getPayeesByCategory(category) {\n    return this.http.get(`${environment.apiUrl}/bills/payees`, {\n      headers: this.getAuthHeaders(),\n      params: {\n        category: category.toString()\n      }\n    });\n  }\n  addPayee(payee) {\n    return this.http.post(`${environment.apiUrl}/bills/payees`, payee, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updatePayee(payeeId, payee) {\n    return this.http.put(`${environment.apiUrl}/bills/payees/${payeeId}`, payee, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  deletePayee(payeeId) {\n    return this.http.delete(`${environment.apiUrl}/bills/payees/${payeeId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Bill Management\n  getPaymentHistory(fromDate, toDate) {\n    let params = {};\n    if (fromDate) params.fromDate = fromDate.toISOString();\n    if (toDate) params.toDate = toDate.toISOString();\n    return this.http.get(`${environment.apiUrl}/bills/history`, {\n      headers: this.getAuthHeaders(),\n      params\n    });\n  }\n  getUpcomingBills() {\n    return this.http.get(`${environment.apiUrl}/bills/upcoming`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getOverdueBills() {\n    return this.http.get(`${environment.apiUrl}/bills/overdue`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Validation\n  validateBillPayment(request) {\n    return this.http.post(`${environment.apiUrl}/bills/validate`, request, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  static {\n    this.ɵfac = function BillPaymentService_Factory(t) {\n      return new (t || BillPaymentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BillPaymentService,\n      factory: BillPaymentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { BillPaymentService };","map":{"version":3,"names":["HttpHeaders","environment","BillPaymentService","constructor","http","authService","getAuthHeaders","token","getToken","createBillPayment","request","post","apiUrl","headers","getBillPayments","get","getBillPayment","paymentId","getBillPaymentsByStatus","status","params","toString","cancelBillPayment","put","getScheduledPayments","getRecurringPayments","updateRecurringPayment","payment","cancelRecurringPayment","delete","getPayees","getPayeesByCategory","category","addPayee","payee","updatePayee","payeeId","deletePayee","getPaymentHistory","fromDate","toDate","toISOString","getUpcomingBills","getOverdueBills","validateBillPayment","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\bill-payment.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { BillPayment, BillPaymentRequest, BillPaymentStatus, Payee, PayeeCategory } from '../models/transfer.model';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BillPaymentService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n\r\n  // Bill Payment Operations\r\n  createBillPayment(request: BillPaymentRequest): Observable<BillPayment> {\r\n    return this.http.post<BillPayment>(`${environment.apiUrl}/bills`, request, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getBillPayments(): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getBillPayment(paymentId: string): Observable<BillPayment> {\r\n    return this.http.get<BillPayment>(`${environment.apiUrl}/bills/${paymentId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getBillPaymentsByStatus(status: BillPaymentStatus): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills`, {\r\n      headers: this.getAuthHeaders(),\r\n      params: { status: status.toString() }\r\n    });\r\n  }\r\n\r\n  cancelBillPayment(paymentId: string): Observable<BillPayment> {\r\n    return this.http.put<BillPayment>(`${environment.apiUrl}/bills/${paymentId}/cancel`, {}, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Scheduled and Recurring Payments\r\n  getScheduledPayments(): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills/scheduled`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getRecurringPayments(): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills/recurring`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateRecurringPayment(paymentId: string, payment: Partial<BillPayment>): Observable<BillPayment> {\r\n    return this.http.put<BillPayment>(`${environment.apiUrl}/bills/recurring/${paymentId}`, payment, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  cancelRecurringPayment(paymentId: string): Observable<void> {\r\n    return this.http.delete<void>(`${environment.apiUrl}/bills/recurring/${paymentId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Payee Management\r\n  getPayees(): Observable<Payee[]> {\r\n    return this.http.get<Payee[]>(`${environment.apiUrl}/bills/payees`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getPayeesByCategory(category: PayeeCategory): Observable<Payee[]> {\r\n    return this.http.get<Payee[]>(`${environment.apiUrl}/bills/payees`, {\r\n      headers: this.getAuthHeaders(),\r\n      params: { category: category.toString() }\r\n    });\r\n  }\r\n\r\n  addPayee(payee: Omit<Payee, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Observable<Payee> {\r\n    return this.http.post<Payee>(`${environment.apiUrl}/bills/payees`, payee, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updatePayee(payeeId: string, payee: Partial<Payee>): Observable<Payee> {\r\n    return this.http.put<Payee>(`${environment.apiUrl}/bills/payees/${payeeId}`, payee, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  deletePayee(payeeId: string): Observable<void> {\r\n    return this.http.delete<void>(`${environment.apiUrl}/bills/payees/${payeeId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Bill Management\r\n  getPaymentHistory(fromDate?: Date, toDate?: Date): Observable<BillPayment[]> {\r\n    let params: any = {};\r\n    if (fromDate) params.fromDate = fromDate.toISOString();\r\n    if (toDate) params.toDate = toDate.toISOString();\r\n\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills/history`, {\r\n      headers: this.getAuthHeaders(),\r\n      params\r\n    });\r\n  }\r\n\r\n  getUpcomingBills(): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills/upcoming`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getOverdueBills(): Observable<BillPayment[]> {\r\n    return this.http.get<BillPayment[]>(`${environment.apiUrl}/bills/overdue`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Validation\r\n  validateBillPayment(request: BillPaymentRequest): Observable<{\r\n    isValid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n  }> {\r\n    return this.http.post<{\r\n      isValid: boolean;\r\n      errors: string[];\r\n      warnings: string[];\r\n    }>(`${environment.apiUrl}/bills/validate`, request, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,WAAW,QAAQ,gCAAgC;;;;AAI5D,MAGaC,kBAAkB;EAE7BC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEKC,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IACzC,OAAO,IAAIR,WAAW,CAAC;MACrB,eAAe,EAAE,UAAUO,KAAK,EAAE;MAClC,cAAc,EAAE;KACjB,CAAC;EACJ;EAEA;EACAE,iBAAiBA,CAACC,OAA2B;IAC3C,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAc,GAAGV,WAAW,CAACW,MAAM,QAAQ,EAAEF,OAAO,EAAE;MACzEG,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAQ,eAAeA,CAAA;IACb,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,QAAQ,EAAE;MACjEC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAU,cAAcA,CAACC,SAAiB;IAC9B,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAc,GAAGd,WAAW,CAACW,MAAM,UAAUK,SAAS,EAAE,EAAE;MAC5EJ,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAY,uBAAuBA,CAACC,MAAyB;IAC/C,OAAO,IAAI,CAACf,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,QAAQ,EAAE;MACjEC,OAAO,EAAE,IAAI,CAACP,cAAc,EAAE;MAC9Bc,MAAM,EAAE;QAAED,MAAM,EAAEA,MAAM,CAACE,QAAQ;MAAE;KACpC,CAAC;EACJ;EAEAC,iBAAiBA,CAACL,SAAiB;IACjC,OAAO,IAAI,CAACb,IAAI,CAACmB,GAAG,CAAc,GAAGtB,WAAW,CAACW,MAAM,UAAUK,SAAS,SAAS,EAAE,EAAE,EAAE;MACvFJ,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA;EACAkB,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACpB,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,kBAAkB,EAAE;MAC3EC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAmB,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACrB,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,kBAAkB,EAAE;MAC3EC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAoB,sBAAsBA,CAACT,SAAiB,EAAEU,OAA6B;IACrE,OAAO,IAAI,CAACvB,IAAI,CAACmB,GAAG,CAAc,GAAGtB,WAAW,CAACW,MAAM,oBAAoBK,SAAS,EAAE,EAAEU,OAAO,EAAE;MAC/Fd,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAsB,sBAAsBA,CAACX,SAAiB;IACtC,OAAO,IAAI,CAACb,IAAI,CAACyB,MAAM,CAAO,GAAG5B,WAAW,CAACW,MAAM,oBAAoBK,SAAS,EAAE,EAAE;MAClFJ,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA;EACAwB,SAASA,CAAA;IACP,OAAO,IAAI,CAAC1B,IAAI,CAACW,GAAG,CAAU,GAAGd,WAAW,CAACW,MAAM,eAAe,EAAE;MAClEC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAyB,mBAAmBA,CAACC,QAAuB;IACzC,OAAO,IAAI,CAAC5B,IAAI,CAACW,GAAG,CAAU,GAAGd,WAAW,CAACW,MAAM,eAAe,EAAE;MAClEC,OAAO,EAAE,IAAI,CAACP,cAAc,EAAE;MAC9Bc,MAAM,EAAE;QAAEY,QAAQ,EAAEA,QAAQ,CAACX,QAAQ;MAAE;KACxC,CAAC;EACJ;EAEAY,QAAQA,CAACC,KAA+D;IACtE,OAAO,IAAI,CAAC9B,IAAI,CAACO,IAAI,CAAQ,GAAGV,WAAW,CAACW,MAAM,eAAe,EAAEsB,KAAK,EAAE;MACxErB,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA6B,WAAWA,CAACC,OAAe,EAAEF,KAAqB;IAChD,OAAO,IAAI,CAAC9B,IAAI,CAACmB,GAAG,CAAQ,GAAGtB,WAAW,CAACW,MAAM,iBAAiBwB,OAAO,EAAE,EAAEF,KAAK,EAAE;MAClFrB,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA+B,WAAWA,CAACD,OAAe;IACzB,OAAO,IAAI,CAAChC,IAAI,CAACyB,MAAM,CAAO,GAAG5B,WAAW,CAACW,MAAM,iBAAiBwB,OAAO,EAAE,EAAE;MAC7EvB,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA;EACAgC,iBAAiBA,CAACC,QAAe,EAAEC,MAAa;IAC9C,IAAIpB,MAAM,GAAQ,EAAE;IACpB,IAAImB,QAAQ,EAAEnB,MAAM,CAACmB,QAAQ,GAAGA,QAAQ,CAACE,WAAW,EAAE;IACtD,IAAID,MAAM,EAAEpB,MAAM,CAACoB,MAAM,GAAGA,MAAM,CAACC,WAAW,EAAE;IAEhD,OAAO,IAAI,CAACrC,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,gBAAgB,EAAE;MACzEC,OAAO,EAAE,IAAI,CAACP,cAAc,EAAE;MAC9Bc;KACD,CAAC;EACJ;EAEAsB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACtC,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,iBAAiB,EAAE;MAC1EC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEAqC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACvC,IAAI,CAACW,GAAG,CAAgB,GAAGd,WAAW,CAACW,MAAM,gBAAgB,EAAE;MACzEC,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;EAEA;EACAsC,mBAAmBA,CAAClC,OAA2B;IAK7C,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAIlB,GAAGV,WAAW,CAACW,MAAM,iBAAiB,EAAEF,OAAO,EAAE;MAClDG,OAAO,EAAE,IAAI,CAACP,cAAc;KAC7B,CAAC;EACJ;;;uBA7IWJ,kBAAkB,EAAA2C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAlBhD,kBAAkB;MAAAiD,OAAA,EAAlBjD,kBAAkB,CAAAkD,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;SAEPnD,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}