{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nclass TransferService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  // Transfer Operations\n  createTransfer(request) {\n    return this.http.post(`${environment.apiUrl}/transfers`, request, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getTransfers() {\n    return this.http.get(`${environment.apiUrl}/transfers`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getTransfer(transferId) {\n    return this.http.get(`${environment.apiUrl}/transfers/${transferId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getTransfersByStatus(status) {\n    return this.http.get(`${environment.apiUrl}/transfers`, {\n      headers: this.getAuthHeaders(),\n      params: {\n        status: status.toString()\n      }\n    });\n  }\n  cancelTransfer(transferId) {\n    return this.http.put(`${environment.apiUrl}/transfers/${transferId}/cancel`, {}, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  scheduleTransfer(request) {\n    return this.http.post(`${environment.apiUrl}/transfers/schedule`, request, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getScheduledTransfers() {\n    return this.http.get(`${environment.apiUrl}/transfers/scheduled`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Beneficiary Management\n  getBeneficiaries() {\n    return this.http.get(`${environment.apiUrl}/beneficiaries`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  addBeneficiary(beneficiary) {\n    return this.http.post(`${environment.apiUrl}/beneficiaries`, beneficiary, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  updateBeneficiary(beneficiaryId, beneficiary) {\n    return this.http.put(`${environment.apiUrl}/beneficiaries/${beneficiaryId}`, beneficiary, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  deleteBeneficiary(beneficiaryId) {\n    return this.http.delete(`${environment.apiUrl}/beneficiaries/${beneficiaryId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Transfer Limits and Validation\n  getTransferLimits() {\n    return this.http.get(`${environment.apiUrl}/transfers/limits`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  validateTransfer(request) {\n    return this.http.post(`${environment.apiUrl}/transfers/validate`, request, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Transfer History\n  getTransferHistory(fromDate, toDate) {\n    let params = {};\n    if (fromDate) params.fromDate = fromDate.toISOString();\n    if (toDate) params.toDate = toDate.toISOString();\n    return this.http.get(`${environment.apiUrl}/transfers/history`, {\n      headers: this.getAuthHeaders(),\n      params\n    });\n  }\n  static {\n    this.ɵfac = function TransferService_Factory(t) {\n      return new (t || TransferService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TransferService,\n      factory: TransferService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { TransferService };","map":{"version":3,"names":["HttpHeaders","environment","TransferService","constructor","http","authService","getAuthHeaders","token","getToken","createTransfer","request","post","apiUrl","headers","getTransfers","get","getTransfer","transferId","getTransfersByStatus","status","params","toString","cancelTransfer","put","scheduleTransfer","getScheduledTransfers","getBeneficiaries","addBeneficiary","beneficiary","updateBeneficiary","beneficiaryId","deleteBeneficiary","delete","getTransferLimits","validateTransfer","getTransferHistory","fromDate","toDate","toISOString","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\transfer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Transfer, TransferRequest, TransferStatus, Beneficiary } from '../models/transfer.model';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TransferService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n\r\n  // Transfer Operations\r\n  createTransfer(request: TransferRequest): Observable<Transfer> {\r\n    return this.http.post<Transfer>(`${environment.apiUrl}/transfers`, request, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getTransfers(): Observable<Transfer[]> {\r\n    return this.http.get<Transfer[]>(`${environment.apiUrl}/transfers`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getTransfer(transferId: string): Observable<Transfer> {\r\n    return this.http.get<Transfer>(`${environment.apiUrl}/transfers/${transferId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getTransfersByStatus(status: TransferStatus): Observable<Transfer[]> {\r\n    return this.http.get<Transfer[]>(`${environment.apiUrl}/transfers`, {\r\n      headers: this.getAuthHeaders(),\r\n      params: { status: status.toString() }\r\n    });\r\n  }\r\n\r\n  cancelTransfer(transferId: string): Observable<Transfer> {\r\n    return this.http.put<Transfer>(`${environment.apiUrl}/transfers/${transferId}/cancel`, {}, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  scheduleTransfer(request: TransferRequest): Observable<Transfer> {\r\n    return this.http.post<Transfer>(`${environment.apiUrl}/transfers/schedule`, request, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getScheduledTransfers(): Observable<Transfer[]> {\r\n    return this.http.get<Transfer[]>(`${environment.apiUrl}/transfers/scheduled`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Beneficiary Management\r\n  getBeneficiaries(): Observable<Beneficiary[]> {\r\n    return this.http.get<Beneficiary[]>(`${environment.apiUrl}/beneficiaries`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  addBeneficiary(beneficiary: Omit<Beneficiary, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Observable<Beneficiary> {\r\n    return this.http.post<Beneficiary>(`${environment.apiUrl}/beneficiaries`, beneficiary, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  updateBeneficiary(beneficiaryId: string, beneficiary: Partial<Beneficiary>): Observable<Beneficiary> {\r\n    return this.http.put<Beneficiary>(`${environment.apiUrl}/beneficiaries/${beneficiaryId}`, beneficiary, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  deleteBeneficiary(beneficiaryId: string): Observable<void> {\r\n    return this.http.delete<void>(`${environment.apiUrl}/beneficiaries/${beneficiaryId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Transfer Limits and Validation\r\n  getTransferLimits(): Observable<{\r\n    dailyLimit: number;\r\n    monthlyLimit: number;\r\n    dailyUsed: number;\r\n    monthlyUsed: number;\r\n    remainingDaily: number;\r\n    remainingMonthly: number;\r\n  }> {\r\n    return this.http.get<{\r\n      dailyLimit: number;\r\n      monthlyLimit: number;\r\n      dailyUsed: number;\r\n      monthlyUsed: number;\r\n      remainingDaily: number;\r\n      remainingMonthly: number;\r\n    }>(`${environment.apiUrl}/transfers/limits`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  validateTransfer(request: TransferRequest): Observable<{\r\n    isValid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n  }> {\r\n    return this.http.post<{\r\n      isValid: boolean;\r\n      errors: string[];\r\n      warnings: string[];\r\n    }>(`${environment.apiUrl}/transfers/validate`, request, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Transfer History\r\n  getTransferHistory(fromDate?: Date, toDate?: Date): Observable<Transfer[]> {\r\n    let params: any = {};\r\n    if (fromDate) params.fromDate = fromDate.toISOString();\r\n    if (toDate) params.toDate = toDate.toISOString();\r\n\r\n    return this.http.get<Transfer[]>(`${environment.apiUrl}/transfers/history`, {\r\n      headers: this.getAuthHeaders(),\r\n      params\r\n    });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}