{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nclass PdfStatementService {\n  constructor() {}\n  /**\n   * Generate Account Statement PDF\n   */\n  generateAccountStatement(options) {\n    console.log('🧞‍♂️ Generating account statement:', options);\n    return this.createPdfStatement('Account Statement', options, this.getAccountStatementData()).pipe(delay(2000) // Simulate processing time\n    );\n  }\n  /**\n   * Generate Transaction History PDF\n   */\n  generateTransactionHistory(options) {\n    console.log('🧞‍♂️ Generating transaction history:', options);\n    return this.createPdfStatement('Transaction Report', options, this.getTransactionData()).pipe(delay(2000));\n  }\n  /**\n   * Generate Tax Statement PDF\n   */\n  generateTaxStatement(year) {\n    console.log('🧞‍♂️ Generating tax statement for year:', year);\n    const options = {\n      startDate: new Date(year, 0, 1),\n      endDate: new Date(year, 11, 31),\n      statementType: 'yearly'\n    };\n    return this.createPdfStatement('Tax Statement', options, this.getTaxStatementData(year)).pipe(delay(2000));\n  }\n  /**\n   * Generate Loan Statement PDF\n   */\n  generateLoanStatement(loanId, options) {\n    console.log('🧞‍♂️ Generating loan statement:', loanId, options);\n    return this.createPdfStatement('Loan Statement', options, this.getLoanStatementData()).pipe(delay(2000));\n  }\n  /**\n   * Generate Investment Statement PDF\n   */\n  generateInvestmentStatement(portfolioId, options) {\n    console.log('🧞‍♂️ Generating investment statement:', portfolioId, options);\n    return this.createPdfStatement('Investment Report', options, this.getInvestmentData()).pipe(delay(2000));\n  }\n  /**\n   * Generate Digital Wallet Statement PDF\n   */\n  generateDigitalWalletStatement(options) {\n    console.log('🧞‍♂️ Generating digital wallet statement:', options);\n    return this.createPdfStatement('Digital Wallet Statement', options, this.getWalletData()).pipe(delay(2000));\n  }\n  /**\n   * Create PDF Statement using jsPDF\n   */\n  createPdfStatement(title, options, data) {\n    return new Observable(observer => {\n      try {\n        // Check if jsPDF is available from CDN\n        const jsPDF = window.jspdf?.jsPDF || window.jsPDF;\n        if (jsPDF) {\n          console.log('✨ Creating PDF using jsPDF...');\n          const pdf = new jsPDF();\n          // Add header\n          this.addPdfHeader(pdf, title);\n          // Add statement period\n          this.addStatementPeriod(pdf, options);\n          // Add statement content based on type\n          this.addStatementContent(pdf, title, data);\n          // Add footer\n          this.addPdfFooter(pdf);\n          // Generate blob\n          const pdfBlob = pdf.output('blob');\n          console.log('📄 PDF generated successfully!');\n          observer.next(pdfBlob);\n          observer.complete();\n        } else {\n          // Fallback: create a properly formatted text document\n          console.warn('⚠️ jsPDF not available, creating formatted text document');\n          const fallbackContent = this.createDetailedTextStatement(title, options, data);\n          const blob = new Blob([fallbackContent], {\n            type: 'text/plain'\n          });\n          observer.next(blob);\n          observer.complete();\n        }\n      } catch (error) {\n        console.error('❌ Error generating PDF:', error);\n        // Create fallback document\n        const fallbackContent = this.createDetailedTextStatement(title, options, data);\n        const blob = new Blob([fallbackContent], {\n          type: 'text/plain'\n        });\n        observer.next(blob);\n        observer.complete();\n      }\n    });\n  }\n  addPdfHeader(pdf, title) {\n    // BankGenie Header\n    pdf.setFontSize(20);\n    pdf.setTextColor(156, 39, 176); // Purple color\n    pdf.text('🧞‍♂️ BankGenie', 20, 20);\n    pdf.setFontSize(16);\n    pdf.setTextColor(0, 0, 0);\n    pdf.text(title, 20, 35);\n    // Add line\n    pdf.setDrawColor(156, 39, 176);\n    pdf.line(20, 40, 190, 40);\n  }\n  addStatementPeriod(pdf, options) {\n    pdf.setFontSize(10);\n    pdf.setTextColor(100, 100, 100);\n    const startDate = options.startDate.toLocaleDateString();\n    const endDate = options.endDate.toLocaleDateString();\n    pdf.text(`Statement Period: ${startDate} to ${endDate}`, 20, 50);\n    pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, 55);\n  }\n  addStatementContent(pdf, title, data) {\n    let yPosition = 70;\n    pdf.setFontSize(12);\n    pdf.setTextColor(0, 0, 0);\n    // Add content based on statement type\n    if (title.includes('Account')) {\n      yPosition = this.addAccountContent(pdf, data, yPosition);\n    } else if (title.includes('Transaction')) {\n      yPosition = this.addTransactionContent(pdf, data, yPosition);\n    } else if (title.includes('Tax')) {\n      yPosition = this.addTaxContent(pdf, data, yPosition);\n    } else if (title.includes('Investment')) {\n      yPosition = this.addInvestmentContent(pdf, data, yPosition);\n    }\n  }\n  addAccountContent(pdf, data, yPosition) {\n    pdf.text('Account Summary', 20, yPosition);\n    yPosition += 10;\n    data.accounts.forEach(account => {\n      pdf.text(`${account.type}: ${account.number}`, 20, yPosition);\n      pdf.text(`Balance: $${account.balance.toFixed(2)}`, 120, yPosition);\n      yPosition += 8;\n    });\n    yPosition += 5;\n    pdf.setFontSize(14);\n    pdf.text(`Total Balance: $${data.totalBalance.toFixed(2)}`, 20, yPosition);\n    return yPosition + 15;\n  }\n  addTransactionContent(pdf, data, yPosition) {\n    pdf.text('Recent Transactions', 20, yPosition);\n    yPosition += 10;\n    data.transactions.forEach(transaction => {\n      pdf.text(transaction.description, 20, yPosition);\n      pdf.text(transaction.category, 90, yPosition);\n      const amount = transaction.amount >= 0 ? `+$${transaction.amount.toFixed(2)}` : `-$${Math.abs(transaction.amount).toFixed(2)}`;\n      pdf.text(amount, 150, yPosition);\n      yPosition += 8;\n    });\n    return yPosition + 10;\n  }\n  addTaxContent(pdf, data, yPosition) {\n    pdf.text('Tax Summary', 20, yPosition);\n    yPosition += 10;\n    pdf.text(`Interest Earned: $${data.interestEarned.toFixed(2)}`, 20, yPosition);\n    yPosition += 8;\n    pdf.text(`Tax Deductions: $${data.taxDeductions.toFixed(2)}`, 20, yPosition);\n    yPosition += 8;\n    pdf.text(`Taxable Income: $${data.taxableIncome.toFixed(2)}`, 20, yPosition);\n    return yPosition + 15;\n  }\n  addInvestmentContent(pdf, data, yPosition) {\n    pdf.text('Investment Portfolio', 20, yPosition);\n    yPosition += 10;\n    data.investments.forEach(investment => {\n      pdf.text(`${investment.name}: $${investment.value.toFixed(2)}`, 20, yPosition);\n      const change = investment.change >= 0 ? `+${investment.change}%` : `${investment.change}%`;\n      pdf.text(change, 150, yPosition);\n      yPosition += 8;\n    });\n    return yPosition + 10;\n  }\n  addPdfFooter(pdf) {\n    const pageHeight = pdf.internal.pageSize.height;\n    pdf.setFontSize(8);\n    pdf.setTextColor(150, 150, 150);\n    pdf.text('Generated by BankGenie - Your Magical Banking Assistant', 20, pageHeight - 20);\n    pdf.text('This document contains confidential financial information', 20, pageHeight - 15);\n  }\n  createDetailedTextStatement(title, options, data) {\n    const startDate = options.startDate.toLocaleDateString();\n    const endDate = options.endDate.toLocaleDateString();\n    const generatedDate = new Date().toLocaleString();\n    let content = `🧞‍♂️ BankGenie - ${title}\\n`;\n    content += `${'='.repeat(60)}\\n\\n`;\n    content += `Statement Period: ${startDate} to ${endDate}\\n`;\n    content += `Generated on: ${generatedDate}\\n`;\n    content += `${'='.repeat(60)}\\n\\n`;\n    // Add content based on statement type\n    if (title.includes('Account')) {\n      content += this.formatAccountData(data);\n    } else if (title.includes('Transaction')) {\n      content += this.formatTransactionData(data);\n    } else if (title.includes('Tax')) {\n      content += this.formatTaxData(data);\n    } else if (title.includes('Investment')) {\n      content += this.formatInvestmentData(data);\n    } else if (title.includes('Loan')) {\n      content += this.formatLoanData(data);\n    } else if (title.includes('Wallet')) {\n      content += this.formatWalletData(data);\n    }\n    content += `\\n${'='.repeat(60)}\\n`;\n    content += `Generated by BankGenie - Your Magical Banking Assistant\\n`;\n    content += `This document contains confidential financial information\\n`;\n    content += `For support, visit our help center or contact customer service\\n`;\n    return content;\n  }\n  formatAccountData(data) {\n    let content = `ACCOUNT SUMMARY\\n`;\n    content += `${'-'.repeat(30)}\\n`;\n    data.accounts.forEach(account => {\n      content += `${account.type}: ${account.number}\\n`;\n      content += `Balance: $${account.balance.toFixed(2)}\\n\\n`;\n    });\n    content += `${'-'.repeat(30)}\\n`;\n    content += `TOTAL BALANCE: $${data.totalBalance.toFixed(2)}\\n`;\n    return content;\n  }\n  formatTransactionData(data) {\n    let content = `RECENT TRANSACTIONS\\n`;\n    content += `${'-'.repeat(50)}\\n`;\n    content += `${'Description'.padEnd(20)} ${'Category'.padEnd(15)} Amount\\n`;\n    content += `${'-'.repeat(50)}\\n`;\n    data.transactions.forEach(transaction => {\n      const amount = transaction.amount >= 0 ? `+$${transaction.amount.toFixed(2)}` : `-$${Math.abs(transaction.amount).toFixed(2)}`;\n      content += `${transaction.description.padEnd(20)} ${transaction.category.padEnd(15)} ${amount}\\n`;\n    });\n    return content;\n  }\n  formatTaxData(data) {\n    let content = `TAX SUMMARY - ${data.year}\\n`;\n    content += `${'-'.repeat(30)}\\n`;\n    content += `Interest Earned: $${data.interestEarned.toFixed(2)}\\n`;\n    content += `Tax Deductions: $${data.taxDeductions.toFixed(2)}\\n`;\n    content += `Taxable Income: $${data.taxableIncome.toFixed(2)}\\n`;\n    content += `Tax Withheld: $${data.taxWithheld.toFixed(2)}\\n`;\n    return content;\n  }\n  formatInvestmentData(data) {\n    let content = `INVESTMENT PORTFOLIO\\n`;\n    content += `${'-'.repeat(40)}\\n`;\n    content += `${'Investment'.padEnd(20)} ${'Value'.padEnd(12)} Change\\n`;\n    content += `${'-'.repeat(40)}\\n`;\n    data.investments.forEach(investment => {\n      const change = investment.change >= 0 ? `+${investment.change}%` : `${investment.change}%`;\n      content += `${investment.name.padEnd(20)} $${investment.value.toFixed(2).padEnd(10)} ${change}\\n`;\n    });\n    content += `${'-'.repeat(40)}\\n`;\n    content += `TOTAL VALUE: $${data.totalValue.toFixed(2)}\\n`;\n    return content;\n  }\n  formatLoanData(data) {\n    let content = `LOAN STATEMENT\\n`;\n    content += `${'-'.repeat(30)}\\n`;\n    content += `Loan ID: ${data.loanId}\\n`;\n    content += `Loan Type: ${data.loanType}\\n`;\n    content += `Principal Amount: $${data.principalAmount.toFixed(2)}\\n`;\n    content += `Outstanding Balance: $${data.outstandingBalance.toFixed(2)}\\n`;\n    content += `Monthly EMI: $${data.monthlyEMI.toFixed(2)}\\n`;\n    content += `Interest Rate: ${data.interestRate}%\\n`;\n    return content;\n  }\n  formatWalletData(data) {\n    let content = `DIGITAL WALLET STATEMENT\\n`;\n    content += `${'-'.repeat(30)}\\n`;\n    content += `Wallet Balance: $${data.walletBalance.toFixed(2)}\\n`;\n    content += `Linked Cards: ${data.linkedCards}\\n`;\n    content += `Total Transactions: ${data.totalTransactions}\\n`;\n    content += `Monthly Spent: $${data.monthlySpent.toFixed(2)}\\n`;\n    return content;\n  }\n  /**\n   * Download Statement as PDF or Text\n   */\n  downloadStatement(blob, filename) {\n    try {\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      // Determine file extension based on blob type\n      const fileExtension = blob.type.includes('pdf') ? '.pdf' : '.txt';\n      link.download = `${filename}-${this.formatDate(new Date())}${fileExtension}`;\n      link.style.display = 'none';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      const fileType = fileExtension === '.pdf' ? 'PDF' : 'text document';\n      console.log(`✨ Statement download completed successfully! Downloaded as ${fileType}`);\n      // Show user notification\n      if (fileExtension === '.txt') {\n        console.log('💡 Note: PDF generation unavailable. Downloaded as formatted text document.');\n      }\n    } catch (error) {\n      console.error('❌ Error downloading statement:', error);\n      // Try alternative download method\n      try {\n        const dataUrl = URL.createObjectURL(blob);\n        window.open(dataUrl, '_blank');\n        console.log('📂 Statement opened in new tab as fallback');\n      } catch (fallbackError) {\n        console.error('❌ Fallback download also failed:', fallbackError);\n        alert('Download failed. Please try again or contact support.');\n      }\n    }\n  }\n  // Mock data generators\n  getAccountStatementData() {\n    return {\n      accounts: [{\n        type: 'Savings Account',\n        number: '****4567',\n        balance: 15750.50\n      }, {\n        type: 'Checking Account',\n        number: '****4568',\n        balance: 8240.25\n      }],\n      totalBalance: 23990.75\n    };\n  }\n  getTransactionData() {\n    return {\n      transactions: [{\n        description: 'Salary Deposit',\n        amount: 3500.00,\n        category: 'Income',\n        date: new Date()\n      }, {\n        description: 'Grocery Store',\n        amount: -89.45,\n        category: 'Food & Dining',\n        date: new Date()\n      }, {\n        description: 'Electric Bill',\n        amount: -125.50,\n        category: 'Utilities',\n        date: new Date()\n      }, {\n        description: 'ATM Withdrawal',\n        amount: -100.00,\n        category: 'Cash',\n        date: new Date()\n      }, {\n        description: 'Online Purchase',\n        amount: -45.99,\n        category: 'Shopping',\n        date: new Date()\n      }]\n    };\n  }\n  getTaxStatementData(year) {\n    return {\n      year: year,\n      interestEarned: 1245.67,\n      taxDeductions: 890.50,\n      taxableIncome: 45600.00,\n      taxWithheld: 6840.00\n    };\n  }\n  getLoanStatementData() {\n    return {\n      loanId: 'LOAN001',\n      loanType: 'Home Loan',\n      principalAmount: 250000.00,\n      outstandingBalance: 187500.00,\n      monthlyEMI: 2150.00,\n      interestRate: 3.75\n    };\n  }\n  getInvestmentData() {\n    return {\n      investments: [{\n        name: 'S&P 500 Fund',\n        value: 12500.00,\n        change: 5.67\n      }, {\n        name: 'Tech Stocks',\n        value: 8750.00,\n        change: -2.34\n      }, {\n        name: 'Bonds Fund',\n        value: 5000.00,\n        change: 1.23\n      }],\n      totalValue: 26250.00\n    };\n  }\n  getWalletData() {\n    return {\n      walletBalance: 1250.75,\n      linkedCards: 3,\n      totalTransactions: 45,\n      monthlySpent: 567.89\n    };\n  }\n  formatDate(date) {\n    return date.toISOString().split('T')[0];\n  }\n  static {\n    this.ɵfac = function PdfStatementService_Factory(t) {\n      return new (t || PdfStatementService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PdfStatementService,\n      factory: PdfStatementService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { PdfStatementService };","map":{"version":3,"names":["Observable","delay","PdfStatementService","constructor","generateAccountStatement","options","console","log","createPdfStatement","getAccountStatementData","pipe","generateTransactionHistory","getTransactionData","generateTaxStatement","year","startDate","Date","endDate","statementType","getTaxStatementData","generateLoanStatement","loanId","getLoanStatementData","generateInvestmentStatement","portfolioId","getInvestmentData","generateDigitalWalletStatement","getWalletData","title","data","observer","jsPDF","window","jspdf","pdf","addPdfHeader","addStatementPeriod","addStatementContent","addPdfFooter","pdfBlob","output","next","complete","warn","fallbackContent","createDetailedTextStatement","blob","Blob","type","error","setFontSize","setTextColor","text","setDrawColor","line","toLocaleDateString","toLocaleString","yPosition","includes","addAccountContent","addTransactionContent","addTaxContent","addInvestmentContent","accounts","forEach","account","number","balance","toFixed","totalBalance","transactions","transaction","description","category","amount","Math","abs","interestEarned","taxDeductions","taxableIncome","investments","investment","name","value","change","pageHeight","internal","pageSize","height","generatedDate","content","repeat","formatAccountData","formatTransactionData","formatTaxData","formatInvestmentData","formatLoanData","formatWalletData","padEnd","taxWithheld","totalValue","loanType","principalAmount","outstandingBalance","monthlyEMI","interestRate","walletBalance","linkedCards","totalTransactions","monthlySpent","downloadStatement","filename","url","URL","createObjectURL","link","document","createElement","href","fileExtension","download","formatDate","style","display","body","appendChild","click","removeChild","revokeObjectURL","fileType","dataUrl","open","fallbackError","alert","date","toISOString","split","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\pdf-statement.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n// Import jsPDF - already included in package.json\r\ndeclare var jsPDF: any;\r\n\r\nexport interface StatementOptions {\r\n  accountId?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  statementType: 'monthly' | 'quarterly' | 'yearly' | 'custom';\r\n  includeImages?: boolean;\r\n  format?: 'pdf' | 'csv' | 'excel';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PdfStatementService {\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Generate Account Statement PDF\r\n   */\r\n  generateAccountStatement(options: StatementOptions): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating account statement:', options);\r\n    return this.createPdfStatement('Account Statement', options, this.getAccountStatementData()).pipe(\r\n      delay(2000) // Simulate processing time\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate Transaction History PDF\r\n   */\r\n  generateTransactionHistory(options: StatementOptions): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating transaction history:', options);\r\n    return this.createPdfStatement('Transaction Report', options, this.getTransactionData()).pipe(\r\n      delay(2000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate Tax Statement PDF\r\n   */\r\n  generateTaxStatement(year: number): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating tax statement for year:', year);\r\n    const options: StatementOptions = {\r\n      startDate: new Date(year, 0, 1),\r\n      endDate: new Date(year, 11, 31),\r\n      statementType: 'yearly'\r\n    };\r\n    return this.createPdfStatement('Tax Statement', options, this.getTaxStatementData(year)).pipe(\r\n      delay(2000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate Loan Statement PDF\r\n   */\r\n  generateLoanStatement(loanId: string, options: StatementOptions): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating loan statement:', loanId, options);\r\n    return this.createPdfStatement('Loan Statement', options, this.getLoanStatementData()).pipe(\r\n      delay(2000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate Investment Statement PDF\r\n   */\r\n  generateInvestmentStatement(portfolioId: string, options: StatementOptions): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating investment statement:', portfolioId, options);\r\n    return this.createPdfStatement('Investment Report', options, this.getInvestmentData()).pipe(\r\n      delay(2000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Generate Digital Wallet Statement PDF\r\n   */\r\n  generateDigitalWalletStatement(options: StatementOptions): Observable<Blob> {\r\n    console.log('🧞‍♂️ Generating digital wallet statement:', options);\r\n    return this.createPdfStatement('Digital Wallet Statement', options, this.getWalletData()).pipe(\r\n      delay(2000)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create PDF Statement using jsPDF\r\n   */\r\n  private createPdfStatement(title: string, options: StatementOptions, data: any): Observable<Blob> {\r\n    return new Observable(observer => {\r\n      try {\r\n        // Check if jsPDF is available from CDN\r\n        const jsPDF = (window as any).jspdf?.jsPDF || (window as any).jsPDF;\r\n        \r\n        if (jsPDF) {\r\n          console.log('✨ Creating PDF using jsPDF...');\r\n          const pdf = new jsPDF();\r\n          \r\n          // Add header\r\n          this.addPdfHeader(pdf, title);\r\n          \r\n          // Add statement period\r\n          this.addStatementPeriod(pdf, options);\r\n          \r\n          // Add statement content based on type\r\n          this.addStatementContent(pdf, title, data);\r\n          \r\n          // Add footer\r\n          this.addPdfFooter(pdf);\r\n          \r\n          // Generate blob\r\n          const pdfBlob = pdf.output('blob');\r\n          console.log('📄 PDF generated successfully!');\r\n          observer.next(pdfBlob);\r\n          observer.complete();\r\n        } else {\r\n          // Fallback: create a properly formatted text document\r\n          console.warn('⚠️ jsPDF not available, creating formatted text document');\r\n          const fallbackContent = this.createDetailedTextStatement(title, options, data);\r\n          const blob = new Blob([fallbackContent], { type: 'text/plain' });\r\n          observer.next(blob);\r\n          observer.complete();\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error generating PDF:', error);\r\n        // Create fallback document\r\n        const fallbackContent = this.createDetailedTextStatement(title, options, data);\r\n        const blob = new Blob([fallbackContent], { type: 'text/plain' });\r\n        observer.next(blob);\r\n        observer.complete();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addPdfHeader(pdf: any, title: string): void {\r\n    // BankGenie Header\r\n    pdf.setFontSize(20);\r\n    pdf.setTextColor(156, 39, 176); // Purple color\r\n    pdf.text('🧞‍♂️ BankGenie', 20, 20);\r\n    \r\n    pdf.setFontSize(16);\r\n    pdf.setTextColor(0, 0, 0);\r\n    pdf.text(title, 20, 35);\r\n    \r\n    // Add line\r\n    pdf.setDrawColor(156, 39, 176);\r\n    pdf.line(20, 40, 190, 40);\r\n  }\r\n\r\n  private addStatementPeriod(pdf: any, options: StatementOptions): void {\r\n    pdf.setFontSize(10);\r\n    pdf.setTextColor(100, 100, 100);\r\n    \r\n    const startDate = options.startDate.toLocaleDateString();\r\n    const endDate = options.endDate.toLocaleDateString();\r\n    \r\n    pdf.text(`Statement Period: ${startDate} to ${endDate}`, 20, 50);\r\n    pdf.text(`Generated on: ${new Date().toLocaleString()}`, 20, 55);\r\n  }\r\n\r\n  private addStatementContent(pdf: any, title: string, data: any): void {\r\n    let yPosition = 70;\r\n    \r\n    pdf.setFontSize(12);\r\n    pdf.setTextColor(0, 0, 0);\r\n    \r\n    // Add content based on statement type\r\n    if (title.includes('Account')) {\r\n      yPosition = this.addAccountContent(pdf, data, yPosition);\r\n    } else if (title.includes('Transaction')) {\r\n      yPosition = this.addTransactionContent(pdf, data, yPosition);\r\n    } else if (title.includes('Tax')) {\r\n      yPosition = this.addTaxContent(pdf, data, yPosition);\r\n    } else if (title.includes('Investment')) {\r\n      yPosition = this.addInvestmentContent(pdf, data, yPosition);\r\n    }\r\n  }\r\n\r\n  private addAccountContent(pdf: any, data: any, yPosition: number): number {\r\n    pdf.text('Account Summary', 20, yPosition);\r\n    yPosition += 10;\r\n    \r\n    data.accounts.forEach((account: any) => {\r\n      pdf.text(`${account.type}: ${account.number}`, 20, yPosition);\r\n      pdf.text(`Balance: $${account.balance.toFixed(2)}`, 120, yPosition);\r\n      yPosition += 8;\r\n    });\r\n    \r\n    yPosition += 5;\r\n    pdf.setFontSize(14);\r\n    pdf.text(`Total Balance: $${data.totalBalance.toFixed(2)}`, 20, yPosition);\r\n    \r\n    return yPosition + 15;\r\n  }\r\n\r\n  private addTransactionContent(pdf: any, data: any, yPosition: number): number {\r\n    pdf.text('Recent Transactions', 20, yPosition);\r\n    yPosition += 10;\r\n    \r\n    data.transactions.forEach((transaction: any) => {\r\n      pdf.text(transaction.description, 20, yPosition);\r\n      pdf.text(transaction.category, 90, yPosition);\r\n      const amount = transaction.amount >= 0 ? `+$${transaction.amount.toFixed(2)}` : `-$${Math.abs(transaction.amount).toFixed(2)}`;\r\n      pdf.text(amount, 150, yPosition);\r\n      yPosition += 8;\r\n    });\r\n    \r\n    return yPosition + 10;\r\n  }\r\n\r\n  private addTaxContent(pdf: any, data: any, yPosition: number): number {\r\n    pdf.text('Tax Summary', 20, yPosition);\r\n    yPosition += 10;\r\n    \r\n    pdf.text(`Interest Earned: $${data.interestEarned.toFixed(2)}`, 20, yPosition);\r\n    yPosition += 8;\r\n    pdf.text(`Tax Deductions: $${data.taxDeductions.toFixed(2)}`, 20, yPosition);\r\n    yPosition += 8;\r\n    pdf.text(`Taxable Income: $${data.taxableIncome.toFixed(2)}`, 20, yPosition);\r\n    \r\n    return yPosition + 15;\r\n  }\r\n\r\n  private addInvestmentContent(pdf: any, data: any, yPosition: number): number {\r\n    pdf.text('Investment Portfolio', 20, yPosition);\r\n    yPosition += 10;\r\n    \r\n    data.investments.forEach((investment: any) => {\r\n      pdf.text(`${investment.name}: $${investment.value.toFixed(2)}`, 20, yPosition);\r\n      const change = investment.change >= 0 ? `+${investment.change}%` : `${investment.change}%`;\r\n      pdf.text(change, 150, yPosition);\r\n      yPosition += 8;\r\n    });\r\n    \r\n    return yPosition + 10;\r\n  }\r\n\r\n  private addPdfFooter(pdf: any): void {\r\n    const pageHeight = pdf.internal.pageSize.height;\r\n    \r\n    pdf.setFontSize(8);\r\n    pdf.setTextColor(150, 150, 150);\r\n    pdf.text('Generated by BankGenie - Your Magical Banking Assistant', 20, pageHeight - 20);\r\n    pdf.text('This document contains confidential financial information', 20, pageHeight - 15);\r\n  }\r\n\r\n  private createDetailedTextStatement(title: string, options: StatementOptions, data: any): string {\r\n    const startDate = options.startDate.toLocaleDateString();\r\n    const endDate = options.endDate.toLocaleDateString();\r\n    const generatedDate = new Date().toLocaleString();\r\n    \r\n    let content = `🧞‍♂️ BankGenie - ${title}\\n`;\r\n    content += `${'='.repeat(60)}\\n\\n`;\r\n    content += `Statement Period: ${startDate} to ${endDate}\\n`;\r\n    content += `Generated on: ${generatedDate}\\n`;\r\n    content += `${'='.repeat(60)}\\n\\n`;\r\n\r\n    // Add content based on statement type\r\n    if (title.includes('Account')) {\r\n      content += this.formatAccountData(data);\r\n    } else if (title.includes('Transaction')) {\r\n      content += this.formatTransactionData(data);\r\n    } else if (title.includes('Tax')) {\r\n      content += this.formatTaxData(data);\r\n    } else if (title.includes('Investment')) {\r\n      content += this.formatInvestmentData(data);\r\n    } else if (title.includes('Loan')) {\r\n      content += this.formatLoanData(data);\r\n    } else if (title.includes('Wallet')) {\r\n      content += this.formatWalletData(data);\r\n    }\r\n\r\n    content += `\\n${'='.repeat(60)}\\n`;\r\n    content += `Generated by BankGenie - Your Magical Banking Assistant\\n`;\r\n    content += `This document contains confidential financial information\\n`;\r\n    content += `For support, visit our help center or contact customer service\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatAccountData(data: any): string {\r\n    let content = `ACCOUNT SUMMARY\\n`;\r\n    content += `${'-'.repeat(30)}\\n`;\r\n    \r\n    data.accounts.forEach((account: any) => {\r\n      content += `${account.type}: ${account.number}\\n`;\r\n      content += `Balance: $${account.balance.toFixed(2)}\\n\\n`;\r\n    });\r\n    \r\n    content += `${'-'.repeat(30)}\\n`;\r\n    content += `TOTAL BALANCE: $${data.totalBalance.toFixed(2)}\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatTransactionData(data: any): string {\r\n    let content = `RECENT TRANSACTIONS\\n`;\r\n    content += `${'-'.repeat(50)}\\n`;\r\n    content += `${'Description'.padEnd(20)} ${'Category'.padEnd(15)} Amount\\n`;\r\n    content += `${'-'.repeat(50)}\\n`;\r\n    \r\n    data.transactions.forEach((transaction: any) => {\r\n      const amount = transaction.amount >= 0 \r\n        ? `+$${transaction.amount.toFixed(2)}` \r\n        : `-$${Math.abs(transaction.amount).toFixed(2)}`;\r\n      content += `${transaction.description.padEnd(20)} ${transaction.category.padEnd(15)} ${amount}\\n`;\r\n    });\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatTaxData(data: any): string {\r\n    let content = `TAX SUMMARY - ${data.year}\\n`;\r\n    content += `${'-'.repeat(30)}\\n`;\r\n    content += `Interest Earned: $${data.interestEarned.toFixed(2)}\\n`;\r\n    content += `Tax Deductions: $${data.taxDeductions.toFixed(2)}\\n`;\r\n    content += `Taxable Income: $${data.taxableIncome.toFixed(2)}\\n`;\r\n    content += `Tax Withheld: $${data.taxWithheld.toFixed(2)}\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatInvestmentData(data: any): string {\r\n    let content = `INVESTMENT PORTFOLIO\\n`;\r\n    content += `${'-'.repeat(40)}\\n`;\r\n    content += `${'Investment'.padEnd(20)} ${'Value'.padEnd(12)} Change\\n`;\r\n    content += `${'-'.repeat(40)}\\n`;\r\n    \r\n    data.investments.forEach((investment: any) => {\r\n      const change = investment.change >= 0 ? `+${investment.change}%` : `${investment.change}%`;\r\n      content += `${investment.name.padEnd(20)} $${investment.value.toFixed(2).padEnd(10)} ${change}\\n`;\r\n    });\r\n    \r\n    content += `${'-'.repeat(40)}\\n`;\r\n    content += `TOTAL VALUE: $${data.totalValue.toFixed(2)}\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatLoanData(data: any): string {\r\n    let content = `LOAN STATEMENT\\n`;\r\n    content += `${'-'.repeat(30)}\\n`;\r\n    content += `Loan ID: ${data.loanId}\\n`;\r\n    content += `Loan Type: ${data.loanType}\\n`;\r\n    content += `Principal Amount: $${data.principalAmount.toFixed(2)}\\n`;\r\n    content += `Outstanding Balance: $${data.outstandingBalance.toFixed(2)}\\n`;\r\n    content += `Monthly EMI: $${data.monthlyEMI.toFixed(2)}\\n`;\r\n    content += `Interest Rate: ${data.interestRate}%\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  private formatWalletData(data: any): string {\r\n    let content = `DIGITAL WALLET STATEMENT\\n`;\r\n    content += `${'-'.repeat(30)}\\n`;\r\n    content += `Wallet Balance: $${data.walletBalance.toFixed(2)}\\n`;\r\n    content += `Linked Cards: ${data.linkedCards}\\n`;\r\n    content += `Total Transactions: ${data.totalTransactions}\\n`;\r\n    content += `Monthly Spent: $${data.monthlySpent.toFixed(2)}\\n`;\r\n    \r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * Download Statement as PDF or Text\r\n   */\r\n  downloadStatement(blob: Blob, filename: string): void {\r\n    try {\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      \r\n      // Determine file extension based on blob type\r\n      const fileExtension = blob.type.includes('pdf') ? '.pdf' : '.txt';\r\n      link.download = `${filename}-${this.formatDate(new Date())}${fileExtension}`;\r\n      \r\n      link.style.display = 'none';\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      const fileType = fileExtension === '.pdf' ? 'PDF' : 'text document';\r\n      console.log(`✨ Statement download completed successfully! Downloaded as ${fileType}`);\r\n      \r\n      // Show user notification\r\n      if (fileExtension === '.txt') {\r\n        console.log('💡 Note: PDF generation unavailable. Downloaded as formatted text document.');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error downloading statement:', error);\r\n      \r\n      // Try alternative download method\r\n      try {\r\n        const dataUrl = URL.createObjectURL(blob);\r\n        window.open(dataUrl, '_blank');\r\n        console.log('📂 Statement opened in new tab as fallback');\r\n      } catch (fallbackError) {\r\n        console.error('❌ Fallback download also failed:', fallbackError);\r\n        alert('Download failed. Please try again or contact support.');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Mock data generators\r\n  private getAccountStatementData(): any {\r\n    return {\r\n      accounts: [\r\n        { type: 'Savings Account', number: '****4567', balance: 15750.50 },\r\n        { type: 'Checking Account', number: '****4568', balance: 8240.25 }\r\n      ],\r\n      totalBalance: 23990.75\r\n    };\r\n  }\r\n\r\n  private getTransactionData(): any {\r\n    return {\r\n      transactions: [\r\n        { description: 'Salary Deposit', amount: 3500.00, category: 'Income', date: new Date() },\r\n        { description: 'Grocery Store', amount: -89.45, category: 'Food & Dining', date: new Date() },\r\n        { description: 'Electric Bill', amount: -125.50, category: 'Utilities', date: new Date() },\r\n        { description: 'ATM Withdrawal', amount: -100.00, category: 'Cash', date: new Date() },\r\n        { description: 'Online Purchase', amount: -45.99, category: 'Shopping', date: new Date() }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private getTaxStatementData(year: number): any {\r\n    return {\r\n      year: year,\r\n      interestEarned: 1245.67,\r\n      taxDeductions: 890.50,\r\n      taxableIncome: 45600.00,\r\n      taxWithheld: 6840.00\r\n    };\r\n  }\r\n\r\n  private getLoanStatementData(): any {\r\n    return {\r\n      loanId: 'LOAN001',\r\n      loanType: 'Home Loan',\r\n      principalAmount: 250000.00,\r\n      outstandingBalance: 187500.00,\r\n      monthlyEMI: 2150.00,\r\n      interestRate: 3.75\r\n    };\r\n  }\r\n\r\n  private getInvestmentData(): any {\r\n    return {\r\n      investments: [\r\n        { name: 'S&P 500 Fund', value: 12500.00, change: 5.67 },\r\n        { name: 'Tech Stocks', value: 8750.00, change: -2.34 },\r\n        { name: 'Bonds Fund', value: 5000.00, change: 1.23 }\r\n      ],\r\n      totalValue: 26250.00\r\n    };\r\n  }\r\n\r\n  private getWalletData(): any {\r\n    return {\r\n      walletBalance: 1250.75,\r\n      linkedCards: 3,\r\n      totalTransactions: 45,\r\n      monthlySpent: 567.89\r\n    };\r\n  }\r\n\r\n  private formatDate(date: Date): string {\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}