{"ast":null,"code":"import { BehaviorSubject, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.TOKEN_KEY = 'netbanking_token';\n    this.USER_KEY = 'netbanking_user';\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Initialize authentication state synchronously\n    this.initializeAuthState();\n  }\n  login(credentials) {\n    // For demo purposes, simulate login without real API call\n    return new Observable(observer => {\n      setTimeout(() => {\n        if (credentials.username === 'demo' && credentials.password === 'password') {\n          const mockUser = {\n            id: '1',\n            username: 'demo',\n            email: 'demo@netbanking.com',\n            firstName: 'John',\n            lastName: 'Doe',\n            phoneNumber: '+1234567890',\n            address: '123 Main Street',\n            city: 'New York',\n            state: 'NY',\n            zipCode: '10001',\n            dateOfBirth: '1990-01-15',\n            occupation: 'Software Developer',\n            isActive: true,\n            createdAt: new Date(),\n            lastLoginAt: new Date()\n          };\n          const mockResponse = {\n            token: 'demo-jwt-token-' + Date.now(),\n            user: mockUser,\n            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\n          };\n\n          this.setToken(mockResponse.token);\n          this.setCurrentUser(mockResponse.user);\n          this.isAuthenticatedSubject.next(true);\n          this.currentUserSubject.next(mockResponse.user);\n          observer.next(mockResponse);\n          observer.complete();\n        } else {\n          observer.error({\n            message: 'Invalid credentials'\n          });\n        }\n      }, 1000);\n    });\n  }\n  logout() {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n    this.isAuthenticatedSubject.next(false);\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  updateUserProfile(profileData) {\n    return new Observable(observer => {\n      // Simulate API call delay\n      setTimeout(() => {\n        const currentUser = this.getCurrentUser();\n        if (currentUser) {\n          // Update the user data with new profile information\n          const updatedUser = {\n            ...currentUser,\n            ...profileData\n          };\n          // Update localStorage and BehaviorSubject\n          this.setCurrentUser(updatedUser);\n          this.currentUserSubject.next(updatedUser);\n          observer.next(updatedUser);\n          observer.complete();\n        } else {\n          observer.error('No user logged in');\n        }\n      }, 1000);\n    });\n  }\n  hasToken() {\n    return !!localStorage.getItem(this.TOKEN_KEY);\n  }\n  setToken(token) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n  setCurrentUser(user) {\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n  }\n  getCurrentUserFromStorage() {\n    const userJson = localStorage.getItem(this.USER_KEY);\n    return userJson ? JSON.parse(userJson) : null;\n  }\n  initializeAuthState() {\n    const token = this.getToken();\n    const user = this.getCurrentUserFromStorage();\n    if (token && user) {\n      // Set authentication state immediately\n      this.isAuthenticatedSubject.next(true);\n      this.currentUserSubject.next(user);\n    } else {\n      // Clear any partial state\n      this.isAuthenticatedSubject.next(false);\n      this.currentUserSubject.next(null);\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","Observable","AuthService","constructor","http","router","TOKEN_KEY","USER_KEY","isAuthenticatedSubject","currentUserSubject","isAuthenticated$","asObservable","currentUser$","initializeAuthState","login","credentials","observer","setTimeout","username","password","mockUser","id","email","firstName","lastName","phoneNumber","address","city","state","zipCode","dateOfBirth","occupation","isActive","createdAt","Date","lastLoginAt","mockResponse","token","now","user","expiresAt","setToken","setCurrentUser","next","complete","error","message","logout","localStorage","removeItem","navigate","getToken","getItem","getCurrentUser","value","updateUserProfile","profileData","currentUser","updatedUser","hasToken","setItem","JSON","stringify","getCurrentUserFromStorage","userJson","parse","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from '../../environments/environment';\r\nimport { User } from '../models/user.model';\r\nimport { LoginRequest, LoginResponse, User } from '../models/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly TOKEN_KEY = 'netbanking_token';\r\n  private readonly USER_KEY = 'netbanking_user';\r\n\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    // Initialize authentication state synchronously\r\n    this.initializeAuthState();\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    // For demo purposes, simulate login without real API call\r\n    return new Observable<LoginResponse>(observer => {\r\n      setTimeout(() => {\r\n        if (credentials.username === 'demo' && credentials.password === 'password') {\r\n          const mockUser: User = {\r\n            id: '1',\r\n            username: 'demo',\r\n            email: 'demo@netbanking.com',\r\n            firstName: 'John',\r\n            lastName: 'Doe',\r\n            phoneNumber: '+1234567890',\r\n            address: '123 Main Street',\r\n            city: 'New York',\r\n            state: 'NY',\r\n            zipCode: '10001',\r\n            dateOfBirth: '1990-01-15',\r\n            occupation: 'Software Developer',\r\n            isActive: true,\r\n            createdAt: new Date(),\r\n            lastLoginAt: new Date()\r\n          };\r\n\r\n          const mockResponse: LoginResponse = {\r\n            token: 'demo-jwt-token-' + Date.now(),\r\n            user: mockUser,\r\n            expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours\r\n          };\r\n\r\n          this.setToken(mockResponse.token);\r\n          this.setCurrentUser(mockResponse.user);\r\n          this.isAuthenticatedSubject.next(true);\r\n          this.currentUserSubject.next(mockResponse.user);\r\n\r\n          observer.next(mockResponse);\r\n          observer.complete();\r\n        } else {\r\n          observer.error({ message: 'Invalid credentials' });\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.TOKEN_KEY);\r\n    localStorage.removeItem(this.USER_KEY);\r\n    this.isAuthenticatedSubject.next(false);\r\n    this.currentUserSubject.next(null);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.TOKEN_KEY);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  updateUserProfile(profileData: Partial<User>): Observable<User> {\r\n    return new Observable(observer => {\r\n      // Simulate API call delay\r\n      setTimeout(() => {\r\n        const currentUser = this.getCurrentUser();\r\n        if (currentUser) {\r\n          // Update the user data with new profile information\r\n          const updatedUser = { ...currentUser, ...profileData };\r\n          \r\n          // Update localStorage and BehaviorSubject\r\n          this.setCurrentUser(updatedUser);\r\n          this.currentUserSubject.next(updatedUser);\r\n          \r\n          observer.next(updatedUser);\r\n          observer.complete();\r\n        } else {\r\n          observer.error('No user logged in');\r\n        }\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem(this.TOKEN_KEY);\r\n  }\r\n\r\n  private setToken(token: string): void {\r\n    localStorage.setItem(this.TOKEN_KEY, token);\r\n  }\r\n\r\n  private setCurrentUser(user: User): void {\r\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\r\n  }\r\n\r\n  private getCurrentUserFromStorage(): User | null {\r\n    const userJson = localStorage.getItem(this.USER_KEY);\r\n    return userJson ? JSON.parse(userJson) : null;\r\n  }\r\n\r\n  private initializeAuthState(): void {\r\n    const token = this.getToken();\r\n    const user = this.getCurrentUserFromStorage();\r\n    \r\n    if (token && user) {\r\n      // Set authentication state immediately\r\n      this.isAuthenticatedSubject.next(true);\r\n      this.currentUserSubject.next(user);\r\n    } else {\r\n      // Clear any partial state\r\n      this.isAuthenticatedSubject.next(false);\r\n      this.currentUserSubject.next(null);\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}