{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nclass AccountService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  getAccounts() {\n    return this.http.get(`${environment.apiUrl}/accounts`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAccount(accountId) {\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getAccountBalance(accountId) {\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/balance`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getTransactions(accountId) {\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/transactions`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getTransactionsByDateRange(accountId, fromDate, toDate) {\n    const params = {\n      fromDate: fromDate.toISOString(),\n      toDate: toDate.toISOString()\n    };\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/transactions`, {\n      headers: this.getAuthHeaders(),\n      params\n    });\n  }\n  getAccountStatement(accountId, fromDate, toDate) {\n    const params = {\n      fromDate: fromDate.toISOString(),\n      toDate: toDate.toISOString()\n    };\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/statement`, {\n      headers: this.getAuthHeaders(),\n      params\n    });\n  }\n  searchTransactions(accountId, query) {\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/transactions/search`, {\n      headers: this.getAuthHeaders(),\n      params: {\n        q: query\n      }\n    });\n  }\n  getTransaction(accountId, transactionId) {\n    return this.http.get(`${environment.apiUrl}/accounts/${accountId}/transactions/${transactionId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  static {\n    this.ɵfac = function AccountService_Factory(t) {\n      return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountService,\n      factory: AccountService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AccountService };","map":{"version":3,"names":["HttpHeaders","environment","AccountService","constructor","http","authService","getAuthHeaders","token","getToken","getAccounts","get","apiUrl","headers","getAccount","accountId","getAccountBalance","getTransactions","getTransactionsByDateRange","fromDate","toDate","params","toISOString","getAccountStatement","searchTransactions","query","q","getTransaction","transactionId","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Account, Transaction, AccountStatement } from '../models/account.model';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n\r\n  getAccounts(): Observable<Account[]> {\r\n    return this.http.get<Account[]>(`${environment.apiUrl}/accounts`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getAccount(accountId: string): Observable<Account> {\r\n    return this.http.get<Account>(`${environment.apiUrl}/accounts/${accountId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getAccountBalance(accountId: string): Observable<{ balance: number; availableBalance: number }> {\r\n    return this.http.get<{ balance: number; availableBalance: number }>(\r\n      `${environment.apiUrl}/accounts/${accountId}/balance`,\r\n      { headers: this.getAuthHeaders() }\r\n    );\r\n  }\r\n\r\n  getTransactions(accountId: string): Observable<Transaction[]> {\r\n    return this.http.get<Transaction[]>(`${environment.apiUrl}/accounts/${accountId}/transactions`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getTransactionsByDateRange(accountId: string, fromDate: Date, toDate: Date): Observable<Transaction[]> {\r\n    const params = {\r\n      fromDate: fromDate.toISOString(),\r\n      toDate: toDate.toISOString()\r\n    };\r\n    return this.http.get<Transaction[]>(`${environment.apiUrl}/accounts/${accountId}/transactions`, {\r\n      headers: this.getAuthHeaders(),\r\n      params\r\n    });\r\n  }\r\n\r\n  getAccountStatement(accountId: string, fromDate: Date, toDate: Date): Observable<AccountStatement> {\r\n    const params = {\r\n      fromDate: fromDate.toISOString(),\r\n      toDate: toDate.toISOString()\r\n    };\r\n    return this.http.get<AccountStatement>(`${environment.apiUrl}/accounts/${accountId}/statement`, {\r\n      headers: this.getAuthHeaders(),\r\n      params\r\n    });\r\n  }\r\n\r\n  searchTransactions(accountId: string, query: string): Observable<Transaction[]> {\r\n    return this.http.get<Transaction[]>(`${environment.apiUrl}/accounts/${accountId}/transactions/search`, {\r\n      headers: this.getAuthHeaders(),\r\n      params: { q: query }\r\n    });\r\n  }\r\n\r\n  getTransaction(accountId: string, transactionId: string): Observable<Transaction> {\r\n    return this.http.get<Transaction>(`${environment.apiUrl}/accounts/${accountId}/transactions/${transactionId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}