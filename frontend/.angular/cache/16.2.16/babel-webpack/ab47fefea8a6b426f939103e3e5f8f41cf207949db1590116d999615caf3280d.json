{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport var NotificationType;\n(function (NotificationType) {\n  NotificationType[\"INFO\"] = \"INFO\";\n  NotificationType[\"SUCCESS\"] = \"SUCCESS\";\n  NotificationType[\"WARNING\"] = \"WARNING\";\n  NotificationType[\"ERROR\"] = \"ERROR\";\n  NotificationType[\"TRANSACTION\"] = \"TRANSACTION\";\n  NotificationType[\"SECURITY\"] = \"SECURITY\";\n  NotificationType[\"SYSTEM\"] = \"SYSTEM\";\n})(NotificationType || (NotificationType = {}));\nexport var NotificationPriority;\n(function (NotificationPriority) {\n  NotificationPriority[\"LOW\"] = \"LOW\";\n  NotificationPriority[\"MEDIUM\"] = \"MEDIUM\";\n  NotificationPriority[\"HIGH\"] = \"HIGH\";\n  NotificationPriority[\"URGENT\"] = \"URGENT\";\n})(NotificationPriority || (NotificationPriority = {}));\nclass NotificationService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.notifications$ = new BehaviorSubject([]);\n    this.unreadCount$ = new BehaviorSubject(0);\n    this.realTimeNotifications$ = new Subject();\n    this.notifications = this.notifications$.asObservable();\n    this.unreadCount = this.unreadCount$.asObservable();\n    this.realTimeNotifications = this.realTimeNotifications$.asObservable();\n    // Initialize notifications when service is created\n    this.loadNotifications();\n    this.loadUnreadCount();\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n  }\n  // WebSocket Connection\n  connect() {\n    if (this.websocket) {\n      return; // Already connected\n    }\n\n    try {\n      this.websocket = new WebSocket(environment.wsUrl);\n      this.websocket.onopen = () => {\n        console.log('WebSocket connected for notifications');\n      };\n      this.websocket.onmessage = event => {\n        try {\n          const notification = JSON.parse(event.data);\n          this.handleRealTimeNotification(notification);\n        } catch (error) {\n          console.error('Error parsing notification:', error);\n        }\n      };\n      this.websocket.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.websocket = undefined;\n        // Attempt to reconnect after 5 seconds\n        setTimeout(() => this.connect(), 5000);\n      };\n      this.websocket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  }\n  disconnect() {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = undefined;\n    }\n  }\n  // HTTP API Methods\n  getNotifications() {\n    return this.http.get(`${environment.apiUrl}/notifications`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getUnreadNotifications() {\n    return this.http.get(`${environment.apiUrl}/notifications/unread`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  markAsRead(notificationId) {\n    return this.http.put(`${environment.apiUrl}/notifications/${notificationId}/read`, {}, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  markAllAsRead() {\n    return this.http.put(`${environment.apiUrl}/notifications/read-all`, {}, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  deleteNotification(notificationId) {\n    return this.http.delete(`${environment.apiUrl}/notifications/${notificationId}`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  getUnreadCount() {\n    return this.http.get(`${environment.apiUrl}/notifications/unread/count`, {\n      headers: this.getAuthHeaders()\n    });\n  }\n  // Local Methods\n  loadNotifications() {\n    this.getNotifications().subscribe({\n      next: notifications => {\n        this.notifications$.next(notifications);\n      },\n      error: error => {\n        console.error('Error loading notifications:', error);\n      }\n    });\n  }\n  loadUnreadCount() {\n    this.getUnreadCount().subscribe({\n      next: response => {\n        this.unreadCount$.next(response.count);\n      },\n      error: error => {\n        console.error('Error loading unread count:', error);\n      }\n    });\n  }\n  handleRealTimeNotification(notification) {\n    // Add to notifications list\n    const currentNotifications = this.notifications$.value;\n    this.notifications$.next([notification, ...currentNotifications]);\n    // Update unread count\n    this.unreadCount$.next(this.unreadCount$.value + 1);\n    // Emit real-time notification\n    this.realTimeNotifications$.next(notification);\n    // Show browser notification if permission granted\n    this.showBrowserNotification(notification);\n  }\n  showBrowserNotification(notification) {\n    if ('Notification' in window && Notification.permission === 'granted') {\n      const browserNotification = new Notification(notification.title, {\n        body: notification.message,\n        tag: notification.id\n      });\n      // Auto close after 5 seconds\n      setTimeout(() => {\n        browserNotification.close();\n      }, 5000);\n      // Handle click\n      browserNotification.onclick = () => {\n        window.focus();\n        if (notification.actionUrl) {\n          // Navigate to action URL if provided\n          window.location.href = notification.actionUrl;\n        }\n        browserNotification.close();\n      };\n    }\n  }\n  // Request browser notification permission\n  requestNotificationPermission() {\n    if ('Notification' in window) {\n      return Notification.requestPermission();\n    }\n    return Promise.resolve('denied');\n  }\n  // Toast notification methods for user feedback\n  showSuccess(message, title = 'Success') {\n    const notification = {\n      id: this.generateId(),\n      title,\n      message,\n      type: NotificationType.SUCCESS,\n      priority: NotificationPriority.MEDIUM,\n      isRead: false,\n      createdAt: new Date(),\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\n    };\n    this.handleRealTimeNotification(notification);\n  }\n  showError(message, title = 'Error') {\n    const notification = {\n      id: this.generateId(),\n      title,\n      message,\n      type: NotificationType.ERROR,\n      priority: NotificationPriority.HIGH,\n      isRead: false,\n      createdAt: new Date(),\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\n    };\n    this.handleRealTimeNotification(notification);\n  }\n  showInfo(message, title = 'Info') {\n    const notification = {\n      id: this.generateId(),\n      title,\n      message,\n      type: NotificationType.INFO,\n      priority: NotificationPriority.LOW,\n      isRead: false,\n      createdAt: new Date(),\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\n    };\n    this.handleRealTimeNotification(notification);\n  }\n  showWarning(message, title = 'Warning') {\n    const notification = {\n      id: this.generateId(),\n      title,\n      message,\n      type: NotificationType.WARNING,\n      priority: NotificationPriority.MEDIUM,\n      isRead: false,\n      createdAt: new Date(),\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\n    };\n    this.handleRealTimeNotification(notification);\n  }\n  generateId() {\n    return 'notif_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n  }\n  static {\n    this.ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { NotificationService };","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","Subject","environment","NotificationType","NotificationPriority","NotificationService","constructor","http","authService","notifications$","unreadCount$","realTimeNotifications$","notifications","asObservable","unreadCount","realTimeNotifications","loadNotifications","loadUnreadCount","getAuthHeaders","token","getToken","connect","websocket","WebSocket","wsUrl","onopen","console","log","onmessage","event","notification","JSON","parse","data","handleRealTimeNotification","error","onclose","undefined","setTimeout","onerror","disconnect","close","getNotifications","get","apiUrl","headers","getUnreadNotifications","markAsRead","notificationId","put","markAllAsRead","deleteNotification","delete","getUnreadCount","subscribe","next","response","count","currentNotifications","value","showBrowserNotification","window","Notification","permission","browserNotification","title","body","message","tag","id","onclick","focus","actionUrl","location","href","requestNotificationPermission","requestPermission","Promise","resolve","showSuccess","generateId","type","SUCCESS","priority","MEDIUM","isRead","createdAt","Date","userId","getCurrentUser","showError","ERROR","HIGH","showInfo","INFO","LOW","showWarning","WARNING","Math","random","toString","substr","now","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\2419470\\vibeCoder\\frontend\\src\\app\\services\\notification.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  message: string;\r\n  type: NotificationType;\r\n  priority: NotificationPriority;\r\n  isRead: boolean;\r\n  createdAt: Date;\r\n  readAt?: Date;\r\n  userId: string;\r\n  actionUrl?: string;\r\n}\r\n\r\nexport enum NotificationType {\r\n  INFO = 'INFO',\r\n  SUCCESS = 'SUCCESS',\r\n  WARNING = 'WARNING',\r\n  ERROR = 'ERROR',\r\n  TRANSACTION = 'TRANSACTION',\r\n  SECURITY = 'SECURITY',\r\n  SYSTEM = 'SYSTEM'\r\n}\r\n\r\nexport enum NotificationPriority {\r\n  LOW = 'LOW',\r\n  MEDIUM = 'MEDIUM',\r\n  HIGH = 'HIGH',\r\n  URGENT = 'URGENT'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationService {\r\n  private notifications$ = new BehaviorSubject<Notification[]>([]);\r\n  private unreadCount$ = new BehaviorSubject<number>(0);\r\n  private realTimeNotifications$ = new Subject<Notification>();\r\n  \r\n  public notifications = this.notifications$.asObservable();\r\n  public unreadCount = this.unreadCount$.asObservable();\r\n  public realTimeNotifications = this.realTimeNotifications$.asObservable();\r\n\r\n  private websocket?: WebSocket;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {\r\n    // Initialize notifications when service is created\r\n    this.loadNotifications();\r\n    this.loadUnreadCount();\r\n  }\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n  }\r\n\r\n  // WebSocket Connection\r\n  connect(): void {\r\n    if (this.websocket) {\r\n      return; // Already connected\r\n    }\r\n\r\n    try {\r\n      this.websocket = new WebSocket(environment.wsUrl);\r\n      \r\n      this.websocket.onopen = () => {\r\n        console.log('WebSocket connected for notifications');\r\n      };\r\n\r\n      this.websocket.onmessage = (event) => {\r\n        try {\r\n          const notification: Notification = JSON.parse(event.data);\r\n          this.handleRealTimeNotification(notification);\r\n        } catch (error) {\r\n          console.error('Error parsing notification:', error);\r\n        }\r\n      };\r\n\r\n      this.websocket.onclose = () => {\r\n        console.log('WebSocket disconnected');\r\n        this.websocket = undefined;\r\n        // Attempt to reconnect after 5 seconds\r\n        setTimeout(() => this.connect(), 5000);\r\n      };\r\n\r\n      this.websocket.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to connect WebSocket:', error);\r\n    }\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.websocket) {\r\n      this.websocket.close();\r\n      this.websocket = undefined;\r\n    }\r\n  }\r\n\r\n  // HTTP API Methods\r\n  getNotifications(): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${environment.apiUrl}/notifications`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getUnreadNotifications(): Observable<Notification[]> {\r\n    return this.http.get<Notification[]>(`${environment.apiUrl}/notifications/unread`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  markAsRead(notificationId: string): Observable<void> {\r\n    return this.http.put<void>(`${environment.apiUrl}/notifications/${notificationId}/read`, {}, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  markAllAsRead(): Observable<void> {\r\n    return this.http.put<void>(`${environment.apiUrl}/notifications/read-all`, {}, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  deleteNotification(notificationId: string): Observable<void> {\r\n    return this.http.delete<void>(`${environment.apiUrl}/notifications/${notificationId}`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  getUnreadCount(): Observable<{ count: number }> {\r\n    return this.http.get<{ count: number }>(`${environment.apiUrl}/notifications/unread/count`, {\r\n      headers: this.getAuthHeaders()\r\n    });\r\n  }\r\n\r\n  // Local Methods\r\n  private loadNotifications(): void {\r\n    this.getNotifications().subscribe({\r\n      next: (notifications: any) => {\r\n        this.notifications$.next(notifications);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading notifications:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadUnreadCount(): void {\r\n    this.getUnreadCount().subscribe({\r\n      next: (response: any) => {\r\n        this.unreadCount$.next(response.count);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading unread count:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private handleRealTimeNotification(notification: Notification): void {\r\n    // Add to notifications list\r\n    const currentNotifications = this.notifications$.value;\r\n    this.notifications$.next([notification, ...currentNotifications]);\r\n    \r\n    // Update unread count\r\n    this.unreadCount$.next(this.unreadCount$.value + 1);\r\n    \r\n    // Emit real-time notification\r\n    this.realTimeNotifications$.next(notification);\r\n    \r\n    // Show browser notification if permission granted\r\n    this.showBrowserNotification(notification);\r\n  }\r\n\r\n  private showBrowserNotification(notification: Notification): void {\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      const browserNotification = new Notification(notification.title, {\r\n        body: notification.message,\r\n        tag: notification.id\r\n      });\r\n\r\n      // Auto close after 5 seconds\r\n      setTimeout(() => {\r\n        browserNotification.close();\r\n      }, 5000);\r\n\r\n      // Handle click\r\n      browserNotification.onclick = () => {\r\n        window.focus();\r\n        if (notification.actionUrl) {\r\n          // Navigate to action URL if provided\r\n          window.location.href = notification.actionUrl;\r\n        }\r\n        browserNotification.close();\r\n      };\r\n    }\r\n  }\r\n\r\n  // Request browser notification permission\r\n  requestNotificationPermission(): Promise<NotificationPermission> {\r\n    if ('Notification' in window) {\r\n      return Notification.requestPermission();\r\n    }\r\n    return Promise.resolve('denied');\r\n  }\r\n\r\n  // Toast notification methods for user feedback\r\n  showSuccess(message: string, title: string = 'Success'): void {\r\n    const notification: Notification = {\r\n      id: this.generateId(),\r\n      title,\r\n      message,\r\n      type: NotificationType.SUCCESS,\r\n      priority: NotificationPriority.MEDIUM,\r\n      isRead: false,\r\n      createdAt: new Date(),\r\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\r\n    };\r\n    \r\n    this.handleRealTimeNotification(notification);\r\n  }\r\n\r\n  showError(message: string, title: string = 'Error'): void {\r\n    const notification: Notification = {\r\n      id: this.generateId(),\r\n      title,\r\n      message,\r\n      type: NotificationType.ERROR,\r\n      priority: NotificationPriority.HIGH,\r\n      isRead: false,\r\n      createdAt: new Date(),\r\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\r\n    };\r\n    \r\n    this.handleRealTimeNotification(notification);\r\n  }\r\n\r\n  showInfo(message: string, title: string = 'Info'): void {\r\n    const notification: Notification = {\r\n      id: this.generateId(),\r\n      title,\r\n      message,\r\n      type: NotificationType.INFO,\r\n      priority: NotificationPriority.LOW,\r\n      isRead: false,\r\n      createdAt: new Date(),\r\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\r\n    };\r\n    \r\n    this.handleRealTimeNotification(notification);\r\n  }\r\n\r\n  showWarning(message: string, title: string = 'Warning'): void {\r\n    const notification: Notification = {\r\n      id: this.generateId(),\r\n      title,\r\n      message,\r\n      type: NotificationType.WARNING,\r\n      priority: NotificationPriority.MEDIUM,\r\n      isRead: false,\r\n      createdAt: new Date(),\r\n      userId: this.authService.getCurrentUser()?.id || 'anonymous'\r\n    };\r\n    \r\n    this.handleRealTimeNotification(notification);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return 'notif_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,eAAe,EAAcC,OAAO,QAAQ,MAAM;AAC3D,SAASC,WAAW,QAAQ,gCAAgC;;;;AAgB5D,WAAYC,gBAQX;AARD,WAAYA,gBAAgB;EAC1BA,gBAAA,iBAAa;EACbA,gBAAA,uBAAmB;EACnBA,gBAAA,uBAAmB;EACnBA,gBAAA,mBAAe;EACfA,gBAAA,+BAA2B;EAC3BA,gBAAA,yBAAqB;EACrBA,gBAAA,qBAAiB;AACnB,CAAC,EARWA,gBAAgB,KAAhBA,gBAAgB;AAU5B,WAAYC,oBAKX;AALD,WAAYA,oBAAoB;EAC9BA,oBAAA,eAAW;EACXA,oBAAA,qBAAiB;EACjBA,oBAAA,iBAAa;EACbA,oBAAA,qBAAiB;AACnB,CAAC,EALWA,oBAAoB,KAApBA,oBAAoB;AAOhC,MAGaC,mBAAmB;EAW9BC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAZb,KAAAC,cAAc,GAAG,IAAIT,eAAe,CAAiB,EAAE,CAAC;IACxD,KAAAU,YAAY,GAAG,IAAIV,eAAe,CAAS,CAAC,CAAC;IAC7C,KAAAW,sBAAsB,GAAG,IAAIV,OAAO,EAAgB;IAErD,KAAAW,aAAa,GAAG,IAAI,CAACH,cAAc,CAACI,YAAY,EAAE;IAClD,KAAAC,WAAW,GAAG,IAAI,CAACJ,YAAY,CAACG,YAAY,EAAE;IAC9C,KAAAE,qBAAqB,GAAG,IAAI,CAACJ,sBAAsB,CAACE,YAAY,EAAE;IAQvE;IACA,IAAI,CAACG,iBAAiB,EAAE;IACxB,IAAI,CAACC,eAAe,EAAE;EACxB;EAEQC,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACX,WAAW,CAACY,QAAQ,EAAE;IACzC,OAAO,IAAIrB,WAAW,CAAC;MACrB,eAAe,EAAE,UAAUoB,KAAK,EAAE;MAClC,cAAc,EAAE;KACjB,CAAC;EACJ;EAEA;EACAE,OAAOA,CAAA;IACL,IAAI,IAAI,CAACC,SAAS,EAAE;MAClB,OAAO,CAAC;;;IAGV,IAAI;MACF,IAAI,CAACA,SAAS,GAAG,IAAIC,SAAS,CAACrB,WAAW,CAACsB,KAAK,CAAC;MAEjD,IAAI,CAACF,SAAS,CAACG,MAAM,GAAG,MAAK;QAC3BC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACtD,CAAC;MAED,IAAI,CAACL,SAAS,CAACM,SAAS,GAAIC,KAAK,IAAI;QACnC,IAAI;UACF,MAAMC,YAAY,GAAiBC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;UACzD,IAAI,CAACC,0BAA0B,CAACJ,YAAY,CAAC;SAC9C,CAAC,OAAOK,KAAK,EAAE;UACdT,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;;MAEvD,CAAC;MAED,IAAI,CAACb,SAAS,CAACc,OAAO,GAAG,MAAK;QAC5BV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,IAAI,CAACL,SAAS,GAAGe,SAAS;QAC1B;QACAC,UAAU,CAAC,MAAM,IAAI,CAACjB,OAAO,EAAE,EAAE,IAAI,CAAC;MACxC,CAAC;MAED,IAAI,CAACC,SAAS,CAACiB,OAAO,GAAIJ,KAAK,IAAI;QACjCT,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;KACF,CAAC,OAAOA,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;;EAExD;EAEAK,UAAUA,CAAA;IACR,IAAI,IAAI,CAAClB,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACmB,KAAK,EAAE;MACtB,IAAI,CAACnB,SAAS,GAAGe,SAAS;;EAE9B;EAEA;EACAK,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACnC,IAAI,CAACoC,GAAG,CAAiB,GAAGzC,WAAW,CAAC0C,MAAM,gBAAgB,EAAE;MAC1EC,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEA4B,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACvC,IAAI,CAACoC,GAAG,CAAiB,GAAGzC,WAAW,CAAC0C,MAAM,uBAAuB,EAAE;MACjFC,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEA6B,UAAUA,CAACC,cAAsB;IAC/B,OAAO,IAAI,CAACzC,IAAI,CAAC0C,GAAG,CAAO,GAAG/C,WAAW,CAAC0C,MAAM,kBAAkBI,cAAc,OAAO,EAAE,EAAE,EAAE;MAC3FH,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEAgC,aAAaA,CAAA;IACX,OAAO,IAAI,CAAC3C,IAAI,CAAC0C,GAAG,CAAO,GAAG/C,WAAW,CAAC0C,MAAM,yBAAyB,EAAE,EAAE,EAAE;MAC7EC,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEAiC,kBAAkBA,CAACH,cAAsB;IACvC,OAAO,IAAI,CAACzC,IAAI,CAAC6C,MAAM,CAAO,GAAGlD,WAAW,CAAC0C,MAAM,kBAAkBI,cAAc,EAAE,EAAE;MACrFH,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEAmC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC9C,IAAI,CAACoC,GAAG,CAAoB,GAAGzC,WAAW,CAAC0C,MAAM,6BAA6B,EAAE;MAC1FC,OAAO,EAAE,IAAI,CAAC3B,cAAc;KAC7B,CAAC;EACJ;EAEA;EACQF,iBAAiBA,CAAA;IACvB,IAAI,CAAC0B,gBAAgB,EAAE,CAACY,SAAS,CAAC;MAChCC,IAAI,EAAG3C,aAAkB,IAAI;QAC3B,IAAI,CAACH,cAAc,CAAC8C,IAAI,CAAC3C,aAAa,CAAC;MACzC,CAAC;MACDuB,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;KACD,CAAC;EACJ;EAEQlB,eAAeA,CAAA;IACrB,IAAI,CAACoC,cAAc,EAAE,CAACC,SAAS,CAAC;MAC9BC,IAAI,EAAGC,QAAa,IAAI;QACtB,IAAI,CAAC9C,YAAY,CAAC6C,IAAI,CAACC,QAAQ,CAACC,KAAK,CAAC;MACxC,CAAC;MACDtB,KAAK,EAAGA,KAAU,IAAI;QACpBT,OAAO,CAACS,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;KACD,CAAC;EACJ;EAEQD,0BAA0BA,CAACJ,YAA0B;IAC3D;IACA,MAAM4B,oBAAoB,GAAG,IAAI,CAACjD,cAAc,CAACkD,KAAK;IACtD,IAAI,CAAClD,cAAc,CAAC8C,IAAI,CAAC,CAACzB,YAAY,EAAE,GAAG4B,oBAAoB,CAAC,CAAC;IAEjE;IACA,IAAI,CAAChD,YAAY,CAAC6C,IAAI,CAAC,IAAI,CAAC7C,YAAY,CAACiD,KAAK,GAAG,CAAC,CAAC;IAEnD;IACA,IAAI,CAAChD,sBAAsB,CAAC4C,IAAI,CAACzB,YAAY,CAAC;IAE9C;IACA,IAAI,CAAC8B,uBAAuB,CAAC9B,YAAY,CAAC;EAC5C;EAEQ8B,uBAAuBA,CAAC9B,YAA0B;IACxD,IAAI,cAAc,IAAI+B,MAAM,IAAIC,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;MACrE,MAAMC,mBAAmB,GAAG,IAAIF,YAAY,CAAChC,YAAY,CAACmC,KAAK,EAAE;QAC/DC,IAAI,EAAEpC,YAAY,CAACqC,OAAO;QAC1BC,GAAG,EAAEtC,YAAY,CAACuC;OACnB,CAAC;MAEF;MACA/B,UAAU,CAAC,MAAK;QACd0B,mBAAmB,CAACvB,KAAK,EAAE;MAC7B,CAAC,EAAE,IAAI,CAAC;MAER;MACAuB,mBAAmB,CAACM,OAAO,GAAG,MAAK;QACjCT,MAAM,CAACU,KAAK,EAAE;QACd,IAAIzC,YAAY,CAAC0C,SAAS,EAAE;UAC1B;UACAX,MAAM,CAACY,QAAQ,CAACC,IAAI,GAAG5C,YAAY,CAAC0C,SAAS;;QAE/CR,mBAAmB,CAACvB,KAAK,EAAE;MAC7B,CAAC;;EAEL;EAEA;EACAkC,6BAA6BA,CAAA;IAC3B,IAAI,cAAc,IAAId,MAAM,EAAE;MAC5B,OAAOC,YAAY,CAACc,iBAAiB,EAAE;;IAEzC,OAAOC,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC;EAClC;EAEA;EACAC,WAAWA,CAACZ,OAAe,EAAEF,KAAA,GAAgB,SAAS;IACpD,MAAMnC,YAAY,GAAiB;MACjCuC,EAAE,EAAE,IAAI,CAACW,UAAU,EAAE;MACrBf,KAAK;MACLE,OAAO;MACPc,IAAI,EAAE9E,gBAAgB,CAAC+E,OAAO;MAC9BC,QAAQ,EAAE/E,oBAAoB,CAACgF,MAAM;MACrCC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,MAAM,EAAE,IAAI,CAAChF,WAAW,CAACiF,cAAc,EAAE,EAAEpB,EAAE,IAAI;KAClD;IAED,IAAI,CAACnC,0BAA0B,CAACJ,YAAY,CAAC;EAC/C;EAEA4D,SAASA,CAACvB,OAAe,EAAEF,KAAA,GAAgB,OAAO;IAChD,MAAMnC,YAAY,GAAiB;MACjCuC,EAAE,EAAE,IAAI,CAACW,UAAU,EAAE;MACrBf,KAAK;MACLE,OAAO;MACPc,IAAI,EAAE9E,gBAAgB,CAACwF,KAAK;MAC5BR,QAAQ,EAAE/E,oBAAoB,CAACwF,IAAI;MACnCP,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,MAAM,EAAE,IAAI,CAAChF,WAAW,CAACiF,cAAc,EAAE,EAAEpB,EAAE,IAAI;KAClD;IAED,IAAI,CAACnC,0BAA0B,CAACJ,YAAY,CAAC;EAC/C;EAEA+D,QAAQA,CAAC1B,OAAe,EAAEF,KAAA,GAAgB,MAAM;IAC9C,MAAMnC,YAAY,GAAiB;MACjCuC,EAAE,EAAE,IAAI,CAACW,UAAU,EAAE;MACrBf,KAAK;MACLE,OAAO;MACPc,IAAI,EAAE9E,gBAAgB,CAAC2F,IAAI;MAC3BX,QAAQ,EAAE/E,oBAAoB,CAAC2F,GAAG;MAClCV,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,MAAM,EAAE,IAAI,CAAChF,WAAW,CAACiF,cAAc,EAAE,EAAEpB,EAAE,IAAI;KAClD;IAED,IAAI,CAACnC,0BAA0B,CAACJ,YAAY,CAAC;EAC/C;EAEAkE,WAAWA,CAAC7B,OAAe,EAAEF,KAAA,GAAgB,SAAS;IACpD,MAAMnC,YAAY,GAAiB;MACjCuC,EAAE,EAAE,IAAI,CAACW,UAAU,EAAE;MACrBf,KAAK;MACLE,OAAO;MACPc,IAAI,EAAE9E,gBAAgB,CAAC8F,OAAO;MAC9Bd,QAAQ,EAAE/E,oBAAoB,CAACgF,MAAM;MACrCC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,MAAM,EAAE,IAAI,CAAChF,WAAW,CAACiF,cAAc,EAAE,EAAEpB,EAAE,IAAI;KAClD;IAED,IAAI,CAACnC,0BAA0B,CAACJ,YAAY,CAAC;EAC/C;EAEQkD,UAAUA,CAAA;IAChB,OAAO,QAAQ,GAAGkB,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAGd,IAAI,CAACe,GAAG,EAAE;EAC9E;;;uBAlPWjG,mBAAmB,EAAAkG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAnBvG,mBAAmB;MAAAwG,OAAA,EAAnBxG,mBAAmB,CAAAyG,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;SAEP1G,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}